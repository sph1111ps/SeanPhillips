name: CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  APP_RUNNER_SERVICE_NAME: ${{ secrets.APP_RUNNER_SERVICE_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Lint
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build Next app
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: |
            .next
            package.json
            package-lock.json
            prisma/schema.prisma
            public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            -t ${{ secrets.ECR_REGISTRY }}:${{ env.IMAGE_TAG }} .

      - name: Push image to ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Ensure App Runner service exists
        id: ensure-service
        run: |
          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='${APP_RUNNER_SERVICE_NAME}'].ServiceArn | [0]" \
            --output text || echo "")

          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ]; then
            SERVICE_ARN=$(aws apprunner create-service \
              --service-name "${APP_RUNNER_SERVICE_NAME}" \
              --source-configuration ImageRepository="{ImageIdentifier='${{ secrets.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}',ImageRepositoryType='ECR',ImageConfiguration={Port='3000'}}" \
              --instance-configuration Cpu=1024,Memory=2048 \
              --output text --query 'Service.ServiceArn')
          fi

          echo "SERVICE_ARN=$SERVICE_ARN" >> $GITHUB_OUTPUT

      - name: Start App Runner deployment
        run: |
          SERVICE_ARN=${{ steps.ensure-service.outputs.SERVICE_ARN }}
          aws apprunner start-deployment \
            --service-arn "$SERVICE_ARN" \
            --source-configuration ImageRepository="{ImageIdentifier='${{ secrets.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}',ImageRepositoryType='ECR',ImageConfiguration={Port='3000'}}"

      - name: Wait for deployment to reach RUNNING
        run: |
          SERVICE_ARN=${{ steps.ensure-service.outputs.SERVICE_ARN }}

          for attempt in {1..30}; do
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query "Service.State" --output text)
            echo "State: $STATUS"

            if [ "$STATUS" = "RUNNING" ]; then
              exit 0
            fi

            if [ "$STATUS" = "DELETED" ] || [ "$STATUS" = "FAILED" ]; then
              echo "Deployment failed with state $STATUS"
              exit 1
            fi

            sleep 10
          done

          echo "Timed out waiting for App Runner deployment"
          aws apprunner describe-service --service-arn "$SERVICE_ARN" --output json
          exit 1
